@using Syncfusion.EJ2.Grids
@using Syncfusion.EJ2
@{
    ViewBag.Title = "Brand";
}

@section styles
{
    <style>
        .form-group.col-md-6 {
            width: 250px;
        }

        #ShipAddress {
            resize: vertical;
        }

        :-ms-fullscreen, .e-dialog {
            max-width: 552px;
        }

        @@media only screen and (max-width: 991px) {
            .e-dialog.e-control.e-popup {
                min-width: 300px !important;
            }
        }

        @@media only screen and (min-width: 992px) {
            .e-dialog.e-control.e-popup {
                min-width: 550px !important;
                min-height: 415px;
            }

            .e-bigger.e-dialog.e-control.e-popup,
            .e-bigger .e-dialog.e-control.e-popup {
                min-height: 496px;
            }
        }
    </style>
}


<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-lg-12 p-1">
                <div class="card card-success card-outline">
                    <div class="card-body text-sm p-1">

                        @Html.EJS().Grid("grdBrand").Height("460").DataSource((IEnumerable<object>)ViewBag.dataSource).ShowColumnMenu(false).AllowSorting().AllowFiltering(true).ActionComplete("actionComplete").Columns(col =>
                   {

                       col.Field("BrandId").HeaderText("Brand ID").IsIdentity(true).ValidationRules(new { required = true, number = true }).Width("80").HeaderTextAlign(TextAlign.Center).TextAlign(TextAlign.Center).Add();
                       col.Field("BrandCode").HeaderText("Brand Code").Width("150").HeaderTextAlign(TextAlign.Center).TextAlign(TextAlign.Center).Add();
                       col.Field("BrandName").HeaderText("Brand Name").Width("120").HeaderTextAlign(TextAlign.Center).TextAlign(TextAlign.Left).Add();
                       col.Field("CreatedBy").HeaderText("Created By").Width("150").HeaderTextAlign(TextAlign.Center).TextAlign(TextAlign.Left).Add();
                       col.Field("CreatedDate").HeaderText("Created Date").Width("150").HeaderTextAlign(TextAlign.Center).TextAlign(TextAlign.Left).Format("dd-MM-yyyy HH:mm:ss").Add();
                       col.Field("UpdatedBy").HeaderText("Updated By").Width("150").HeaderTextAlign(TextAlign.Center).TextAlign(TextAlign.Left).Add();
                       col.Field("UpdatedDate").HeaderText("Updated Date").Width("150").HeaderTextAlign(TextAlign.Center).TextAlign(TextAlign.Left).Format("dd-MM-yyyy HH:mm:ss").Add();

                    }).FilterSettings(filter =>
                    {
                       filter.Type(FilterType.Excel);
                    }).AllowPaging().PageSettings(page => page.PageCount(5)).EditSettings(edit =>
                    {
                        edit.AllowAdding(true)
                        .AllowEditOnDblClick(false)
                        .AllowEditing(true)
                        .AllowDeleting(true)
                        .ShowConfirmDialog(true)
                        .ShowDeleteConfirmDialog(true)
                        .Mode(EditMode.Dialog)
                        .Template("#dialogtemplate");
                    }).Toolbar(new List<string>()
                    {
                        "Add", "Edit", "Delete", "Update", "Cancel"
                    }).Load("load").Created("created").ActionBegin("actionBegin").ActionComplete("actionComplete").DataBound("dataBound").Render()

                    </div>
                </div><!-- /.card -->
            </div>
        </div><!-- /.row -->

    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->

<script>



    function load() {
        console.log("load");
    }
    function created() {
        console.log("created");
    }
    function actionBegin(args) {
        console.log("actionBegin Save Cancel " + JSON.stringify(args));
        if (args.requestType === 'save') {
            args.data.rowData = args.data.rowData.toString();
        }

    }
    function dataBound() {
        console.log('dataBound');
    }
    function actionComplete(args) {
        if (args.requestType === 'beginEdit' || args.requestType === 'add') {
            let spinner = ej.popups.createSpinner({ target: args.dialog.element });
            ej.popups.showSpinner(args.dialog.element);
            if (args.requestType === 'beginEdit') {
                var ajax = new ej.base.Ajax({
                    url: "@Url.Action("Edit", "Brand", new { Area = "Masters" })", //render the partial view
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ value: args.rowData })
                });
                ajax.send().then(function (data) {
                    appendElement(data, args.form); //render the edit form with selected record
                    args.form.elements.namedItem('BrandId').focus();
                    ej.popups.hideSpinner(args.dialog.element);
                }).catch(function (xhr) {
                    console.log(xhr);
                    ej.popups.hideSpinner(args.dialog.element);
                });
            }
            if (args.requestType === 'add') {
                var ajax = new ej.base.Ajax({
                    url: "@Url.Action("Add", "Brand", new { Area = "Masters" })", //render the partial view
                    type: "POST",
                    contentType: "application/json",
                });
                ajax.send().then(function (data) {
                    appendElement(data, args.form); //Render the edit form with selected record
                    args.form.elements.namedItem('BrandId').focus();
                    ej.popups.hideSpinner(args.dialog.element);
                }).catch(function (xhr) {
                    console.log(xhr);
                    ej.popups.hideSpinner(args.dialog.element);
                });
            }
        }
    }

    function appendElement(elementString, form) {
        let dialogTemp = form.querySelector("#dialogTemp");
        dialogTemp.innerHTML = elementString;
        let formInstance = form.ej2_instances[0];
        formInstance.addRules('BrandId', { required: true, number: true });
        formInstance.addRules('BrandCode', { required: true, minLength: 2 }); //adding the form validation rules
        formInstance.refresh();  // refresh method of the formObj
        var script = document.createElement('script');
        script.type = "text/javascript";
        var serverScript = dialogTemp.querySelector('script');
        script.textContent = serverScript.innerHTML;
        document.head.appendChild(script);
        serverScript.remove();
    }

</script>

<script id='dialogtemplate' type="text/x-template">
    <div id="dialogTemp">
    </div>
</script>

@section scripts
{

    <script>
        
        $(document).ready(function () {
            console.info("document ready");
        });
    </script>
}

