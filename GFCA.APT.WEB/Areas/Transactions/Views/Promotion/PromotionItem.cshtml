@using Syncfusion.EJ2
@model GFCA.APT.Domain.Dto.PromotionPlanningDto
@using GFCA.APT.WEB.Helpers
@{
    ViewBag.Title = "PromotionItem";
}

@section styles
{
    <style>
        .form-group.col-md-6 {
            width: 250px;
        }

        :-ms-fullscreen, .e-dialog {
            max-width: 552px;
        }

        @@media only screen and (max-width: 991px) {
            .e-dialog.e-control.e-popup {
                min-width: 300px !important;
            }
        }

        @@media only screen and (min-width: 992px) {
            .e-dialog.e-control.e-popup {
                /* min-width: 550px !important;*/
                min-width: 300px !important;
                min-height: 180px;
            }

            .e-bigger.e-dialog.e-control.e-popup,
            .e-bigger .e-dialog.e-control.e-popup {
                min-height: 496px;
            }
        }
    </style>
}

<form autocomplete="off" class="form-horizontal">
    <div class="content-header">
        <div class="container-fluid">
            @*----------------- document header -----------------*@
            @Html.Partial("_DocumentStateSection", Model.DocumentData)
            @Html.Partial("_RequesterSection", Model.RequesterData)

            @*----------------- Promotion planning header -----------------*@
            @Html.Partial("ItemHeaderPartial", Model.OverviewData)

            @*----------------- Promotion planning detail -----------------*@
            @Html.Partial("ItemDetailPartial", Model.OverviewData)

            @*----------------- Promotion planning footer -----------------*@
            @Html.Partial("ItemFooterPartial", Model.FooterData)

            @*----------------- document footer -----------------*@
            @Html.Partial("_HistorySection", Model.HistoryData)
        </div>
    </div>
</form>
@section preScripts
{
    <script>
        var urlServices = {
            CurrentUrl     : "@Url.Action("PromotionItem", "Promotion", new { Area = "Transactions", DOC_PROM_PH_ID = Model.OverviewData.DOC_PROM_PH_ID })",
            AddSale        : "@Url.Action("CreatePromotionPlanngSale", "Promotion", new { Area = "Transactions" })",
            AddInvestment  : "@Url.Action("CreatePromotionPlanningInvestment", "Promotion", new { Area = "Transactions" })",
            EditSale       : "@Url.Action("EditPromotionPlanngSale", "Promotion", new { Area = "Transactions" })",
            EditInvestment : "@Url.Action("EditPromotionPlanningInvestment", "Promotion", new { Area = "Transactions" })",
            DeleteSale       : "@Url.Action("DeletePromotionPlanngSale", "Promotion", new { Area = "Transactions" })",
            DeleteInvestment: "@Url.Action("DeletePromotionPlanningInvestment", "Promotion", new { Area = "Transactions" })",
            Submit: "@Url.Action("SubmitPromotionPlanning", "Promotion", new { Area = "Transactions" })",
            Approve: "@Url.Action("ApprovePromotionPlanning", "Promotion", new { Area = "Transactions" })",
            Approvelist: "@Url.Action("Pending", "Promotion", new { Area = "Transactions" })",
            index: "@Url.Action("index", "Promotion", new { Area = "Transactions" })",


        }
        var argruments = {
            DOC_PROM_PH_ID : "@Model.OverviewData.DOC_PROM_PH_ID",
            dataSale: null,
            dataInvest: null,
        }
        var btnHtml = "@BtnControltHelper.btnHtml("APP", Model.OverviewData.DOC_STATUS.ToString())"

        function onGridSaleRowSelected(args) {
            argruments.dataSale = args.data;
        }
        function onGridSaleRowDeselected(args) {
            if (argruments.dataSale == args.data) {
                argruments.dataSale = null;
            }
        }

        function onGridInvestRowSelected(args) {
            argruments.dataInvest = args.data;
        }
        function onGridInvestRowDeselected(args) {
            if (argruments.dataInvest == args.data) {
                argruments.dataInvest = null;
            }
        }

       function Submit () {


         //  alert(argruments.DOC_PROM_PH_ID);

         //  alert(urlServices.Submit);

            $.ajax({
                type: 'POST',
                url: urlServices.Submit,
                dataType: 'json',
                data:
                {
                    DOC_PROM_PH_ID: @Model.OverviewData.DOC_PROM_PH_ID
                },
                success: function (res) {
                  // var obgData = JSON.stringify(res.data);
                    var obgData_Json = JSON.parse(res.data);
                   // alert(obgData_Json.Success);
                    if (obgData_Json.Success) {
 

                        window.location = urlServices.index;



                    }
                    else {

                        $.toast({
                            type: "error",
                            title: "error",
                            subtitle: (new Date()).toDateString(),
                            content: JSON.stringify(obgData_Json.data),
                            delay: 7000
                        });

                       // showMessageError(data.messages);
                    }


                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });






        }
           function Approve () {


         //  alert(argruments.DOC_PROM_PH_ID);

         //  alert(urlServices.Submit);

            $.ajax({
                type: 'POST',
                url: urlServices.Approve,
                dataType: 'json',
                data:
                {
                    DOC_PROM_PH_ID: @Model.OverviewData.DOC_PROM_PH_ID
                },
                success: function (res) {

                    var obgData_Json = JSON.parse(res.data);
                   // alert(obgData_Json.Success);
                    if (obgData_Json.Success) {



                        window.location = urlServices.Approvelist;



                    }
                    else {

                        $.toast({
                            type: "error",
                            title: "error",
                            subtitle: (new Date()).toDateString(),
                            content: JSON.stringify(data),
                            delay: 7000
                        });

                       // showMessageError(data.messages);
                    }


                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });






        }

        $(document).ready(function () {

            $("#btn-command").html(btnHtml);

            $("#btn-submit").click(function () {



                BootstrapDialog.show({
                    message: 'Are you sure you want to submit?',
                    type: BootstrapDialog.TYPE_DEFAULT,
                    title: 'Submit',
                    buttons: [
                        {
                        label: 'Ok',
                        // no title as it is optional
                       // cssClass: 'btn-primary',
                        data: {
                            js: 'btn-confirm',
                        },
                            action: function (dialogItself) {
                                Submit();
                            dialogItself.close();
                        }
                    }, {
                        label: 'Cancel',
                        action: function (dialogItself) {
                            dialogItself.close();
                        }
                    }]

                });



               // Approve();
               // alert(urlServices.AddInvestment);
            });

            $("#btn-approve").click(function () {


                BootstrapDialog.show({
                    message: 'Are you sure you want to Approve?',
                    type: BootstrapDialog.TYPE_DEFAULT,
                    title: 'Submit',
                    buttons: [
                        {
                            label: 'Ok',
                            // no title as it is optional
                            // cssClass: 'btn-primary',
                            data: {
                                js: 'btn-confirm',
                            },
                            action: function (dialogItself) {
                                Approve();
                                dialogItself.close();
                            }
                        }, {
                            label: 'Cancel',
                            action: function (dialogItself) {
                                dialogItself.close();
                            }
                        }]

                });
                // alert(urlServices.AddInvestment);
            });

        });






    </script>


}

@section scripts
{
    @Scripts.Render("~/Scripts/transactions/promotionHeaderPopup.js")
    @Scripts.Render("~/Scripts/transactions/promotionItem.js")

}